name: Puter.js Free AI - Auto Decrypt

on:
  push:
    paths:
      - 'servers.js'
      - 'key_search_report.txt'
  workflow_dispatch:
    inputs:
      ai_model:
        description: 'AI Model to use'
        required: false
        default: 'claude-sonnet-4.5'
        type: choice
        options:
          - gpt-5
          - gpt-5-mini
          - gpt-5-nano
          - gpt-4o
          - gpt-4o-mini
          - gpt-4.1
          - gpt-4.1-mini
          - gpt-4.1-nano
          - o1
          - o1-mini
          - o1-pro
          - o3
          - o3-mini
          - o4-mini
          - claude-sonnet-4.5
          - claude-sonnet-4
          - claude-opus-4
          - claude-3-7-sonnet
          - claude-3-5-sonnet
          - deepseek-chat
          - deepseek-reasoner
          - gemini-2.0-flash
          - gemini-1.5-flash
          - meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo
          - mistral-large-latest
          - grok-beta

jobs:
  decrypt-with-puter:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pycryptodome requests

      - name: Prepare analysis files
        run: |
          mkdir -p analysis_output

          # Check input files
          if [ -f "servers.js" ]; then
            echo "‚úÖ servers.js found"
            cat servers.js
          else
            echo "‚ùå servers.js not found"
            exit 1
          fi

          if [ -f "key_search_report.txt" ]; then
            echo "‚úÖ key_search_report.txt found"
            head -n 20 key_search_report.txt
          else
            echo "‚ö†Ô∏è  key_search_report.txt not found (optional)"
          fi

      - name: Create Puter.js decryptor
        run: |
          cat > decrypt_with_puter.html << 'HTML_EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <title>Puter.js AI Decryptor - 100% FREE</title>
              <script src="https://js.puter.com/v2/"></script>
          </head>
          <body>
              <h1>ü§ñ AI-Powered Config Decryptor (FREE - No API Key)</h1>
              <div id="status">Initializing...</div>
              <pre id="output"></pre>

              <script>
              (async function() {
                  const statusDiv = document.getElementById('status');
                  const outputDiv = document.getElementById('output');

                  function log(msg) {
                      console.log(msg);
                      outputDiv.textContent += msg + '\n';
                  }

                  function updateStatus(msg) {
                      statusDiv.textContent = msg;
                      log('üìä ' + msg);
                  }

                  try {
                      updateStatus('Loading configuration files...');

                      // Read servers.js and key_search_report.txt
                      // In GitHub Actions, these will be injected via environment
                      const serversJsData = SERVERS_JS_DATA;
                      const keySearchReport = KEY_SEARCH_REPORT_DATA;

                      log('üí∞ Cost: FREE - No API keys required!');
                      log('üöÄ Using Puter.js unlimited AI access');

                      updateStatus('Creating AI analysis prompt...');

                      const prompt = `
          # AUTONOMOUS DECRYPTION MISSION

          You are an expert cryptanalyst. Analyze these files and decrypt the configuration.

          ## INPUT DATA:

          ### servers.js:
          \`\`\`javascript
          ${serversJsData}
          \`\`\`

          ### key_search_report.txt:
          \`\`\`
          ${keySearchReport}
          \`\`\`

          ## YOUR TASKS:

          1. **FIND ENCRYPTION KEY** from key_search_report.txt or servers.js
             - Look for strings like: "ocean2024", "secret", "password", etc.
             - Extract ALL potential keys (4-32 characters)
             - Prioritize alphanumeric strings

          2. **IDENTIFY ALGORITHM** from key_search_report.txt or servers.js
             - Find mentions of: AES, DES, RSA, CBC, ECB, SHA-256, MD5
             - Determine cipher mode and padding
             - Identify IV strategy

          3. **TEST SYSTEMATICALLY**
             For each key candidate, try:
             - SHA-256(key) + IV from first 16 bytes
             - MD5(key) + IV from first 16 bytes
             - Direct key + IV from data
             - Zero IV + hashed key

          4. **DECRYPT ALL FIELDS**
             - SNIHost values (all variants)
             - Payload values (OpenVPN configs)
             - Squid proxy values

          5. **PROVIDE WORKING CODE**
             - Python decryption script
             - JavaScript implementation
             - Ready to use immediately

          ## OUTPUT FORMAT (JSON ONLY):

          Return ONLY valid JSON in this exact format:
          {
            "success": true,
            "key_found": "actual_key_here",
            "key_source": "line X in key_search_report or variable in servers.js",
            "algorithm": {
              "cipher": "AES-256-CBC",
              "key_derivation": "SHA-256",
              "iv_strategy": "first_16_bytes",
              "padding": "PKCS7"
            },
            "decrypted_fields": {
              "snihost_1": "decrypted_domain",
              "snihost_2": "decrypted_domain",
              "payload_1": "OpenVPN config...",
              "squid_1": "proxy:port"
            },
            "python_code": "complete working script",
            "javascript_code": "complete working script",
            "confidence": 95
          }

          CRITICAL: Return ONLY the JSON, no markdown, no explanations.
          `;

                      updateStatus('Sending to FREE AI for analysis...');
                      log('ü§ñ Using model: ' + AI_MODEL);
                      log('üí° No rate limits, no API keys needed!');

                      const response = await puter.ai.chat(prompt, {
                          model: AI_MODEL,
                          temperature: 0.1,
                          max_tokens: 8000
                      });

                      log('üì• Received AI response');
                      log('Response length: ' + response.length + ' chars');

                      updateStatus('Parsing AI response...');

                      // Extract JSON from response
                      let jsonResult;
                      try {
                          // Try direct parse
                          jsonResult = JSON.parse(response);
                      } catch (e) {
                          // Try to extract JSON from markdown
                          const jsonMatch = response.match(/\`\`\`json\s*([\s\S]*?)\`\`\`/) ||
                                          response.match(/\`\`\`\s*([\s\S]*?)\`\`\`/) ||
                                          response.match(/\{[\s\S]*\}/);

                          if (jsonMatch) {
                              jsonResult = JSON.parse(jsonMatch[1] || jsonMatch[0]);
                          } else {
                              throw new Error('No JSON found in response');
                          }
                      }

                      updateStatus('‚úÖ Analysis complete!');

                      log('\n' + '='.repeat(60));
                      log('üîë KEY FOUND: ' + jsonResult.key_found);
                      log('üìç Source: ' + jsonResult.key_source);
                      log('üîê Algorithm: ' + jsonResult.algorithm.cipher);
                      log('‚ú® Confidence: ' + jsonResult.confidence + '%');
                      log('üí∞ Cost: $0.00 (FREE with Puter.js)');
                      log('='.repeat(60));

                      // Save results
                      window.DECRYPTION_RESULTS = jsonResult;

                      // Display decrypted fields
                      log('\nüì¶ DECRYPTED FIELDS:\n');
                      for (const [key, value] of Object.entries(jsonResult.decrypted_fields)) {
                          log(`${key}: ${value.substring(0, 100)}${value.length > 100 ? '...' : ''}`);
                      }

                      // Signal completion to Node.js
                      console.log('PUTER_RESULTS_START');
                      console.log(JSON.stringify(jsonResult, null, 2));
                      console.log('PUTER_RESULTS_END');

                      updateStatus('‚úÖ Complete! Results saved.');

                  } catch (error) {
                      updateStatus('‚ùå Error: ' + error.message);
                      log('Error details: ' + error.stack);
                      console.error('PUTER_ERROR:', error);
                  }
              })();
              </script>
          </body>
          </html>
          HTML_EOF

          echo "‚úÖ Puter.js decryptor created"

      - name: Create Node.js runner
        run: |
          cat > run_puter.js << 'JS_EOF'
          const fs = require('fs');
          const { execSync } = require('child_process');
          const path = require('path');

          console.log('üöÄ Puter.js AI Decryptor Runner');
          console.log('üí∞ 100% FREE - No API Keys Required');
          console.log('='.repeat(60));

          // Read input files
          const serversJs = fs.readFileSync('servers.js', 'utf8');
          const keySearchReport = fs.existsSync('key_search_report.txt')
              ? fs.readFileSync('key_search_report.txt', 'utf8')
              : 'No key search report provided';

          const aiModel = process.env.AI_MODEL || 'claude-sonnet-4.5';

          console.log(`üìä servers.js file loaded`);
          console.log(`ü§ñ AI Model: ${aiModel}`);
          console.log(`üÜì Unlimited usage, no rate limits`);
          console.log('');

          // Inject data into HTML
          let html = fs.readFileSync('decrypt_with_puter.html', 'utf8');

          // Use JSON.stringify to properly escape the string content for JS injection
          html = html.replace('SERVERS_JS_DATA', JSON.stringify(serversJs));
          html = html.replace('KEY_SEARCH_REPORT_DATA', JSON.stringify(keySearchReport));
          html = html.replace('AI_MODEL', JSON.stringify(aiModel));

          fs.writeFileSync('decrypt_ready.html', html);

          console.log('‚úÖ HTML prepared with data');
          console.log('üìÑ File: decrypt_ready.html');
          console.log('');
          console.log('‚ö†Ô∏è  NOTE: This requires a browser environment.');
          console.log('For GitHub Actions, we\'ll use puppeteer...');
          console.log('');

          // Save for manual testing
          console.log('‚úÖ Ready for execution');
          process.exit(0);
          JS_EOF

          node run_puter.js

      - name: Install Puppeteer
        run: |
          npm install puppeteer

      - name: Run Puter.js with Puppeteer
        env:
          AI_MODEL: ${{ github.event.inputs.ai_model || 'claude-sonnet-4.5' }}
        run: |
          cat > run_puppeteer.js << 'JS_EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
              console.log('üåê Launching headless browser...');
              console.log('üí∞ FREE AI Analysis - No costs!');

              const browser = await puppeteer.launch({
                  headless: 'new',
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
              });

              const page = await browser.newPage();

              // Capture console logs
              const logs = [];
              page.on('console', msg => {
                  const text = msg.text();
                  console.log('Browser:', text);
                  logs.push(text);
              });

              // Navigate to our HTML file
              const htmlPath = 'file://' + process.cwd() + '/decrypt_ready.html';
              console.log('üìÑ Loading:', htmlPath);

              await page.goto(htmlPath, { waitUntil: 'networkidle0' });

              // Wait for results (max 5 minutes)
              console.log('‚è≥ Waiting for AI analysis...');
              console.log('üöÄ Using Puter.js unlimited free tier');

              let results = null;
              const timeout = 300000; // 5 minutes
              const start = Date.now();

              while (!results && (Date.now() - start) < timeout) {
                  await new Promise(resolve => setTimeout(resolve, 1000));

                  // Check for results in logs
                  const startIdx = logs.findIndex(l => l === 'PUTER_RESULTS_START');
                  const endIdx = logs.findIndex(l => l === 'PUTER_RESULTS_END');

                  if (startIdx !== -1 && endIdx !== -1) {
                      const jsonLines = logs.slice(startIdx + 1, endIdx);
                      const jsonText = jsonLines.join('\n');

                      try {
                          results = JSON.parse(jsonText);
                          console.log('‚úÖ Results received!');
                      } catch (e) {
                          console.error('‚ùå Failed to parse results:', e.message);
                      }
                      break;
                  }

                  // Check for errors
                  const errorLog = logs.find(l => l.startsWith('PUTER_ERROR:'));
                  if (errorLog) {
                      console.error('‚ùå Puter.js error:', errorLog);
                      break;
                  }
              }

              await browser.close();

              if (results) {
                  // Save results
                  fs.writeFileSync('analysis_output/puter_results.json',
                      JSON.stringify(results, null, 2));

                  // Save Python script
                  if (results.python_code) {
                      fs.writeFileSync('analysis_output/decrypt_auto.py', results.python_code);
                      fs.chmodSync('analysis_output/decrypt_auto.py', '755');
                  }

                  // Save JavaScript script
                  if (results.javascript_code) {
                      fs.writeFileSync('analysis_output/decrypt_auto.js', results.javascript_code);
                  }

                  // Save decrypted fields
                  if (results.decrypted_fields) {
                      fs.writeFileSync('analysis_output/decrypted_fields.json',
                          JSON.stringify(results.decrypted_fields, null, 2));
                  }

                  console.log('');
                  console.log('='.repeat(60));
                  console.log('‚úÖ DECRYPTION COMPLETE');
                  console.log('='.repeat(60));
                  console.log('üîë Key:', results.key_found);
                  console.log('üîê Algorithm:', results.algorithm.cipher);
                  console.log('‚ú® Confidence:', results.confidence + '%');
                  console.log('üí∞ Total Cost: $0.00 (FREE)');
                  console.log('üìÅ Files saved to: analysis_output/');
                  console.log('='.repeat(60));

                  process.exit(0);
              } else {
                  console.error('‚ùå No results received within timeout');
                  process.exit(1);
              }
          })();
          JS_EOF

          node run_puppeteer.js

      - name: Verify results
        run: |
          if [ -f "analysis_output/puter_results.json" ]; then
            echo "‚úÖ Analysis complete"
            cat analysis_output/puter_results.json | jq '.'
          else
            echo "‚ùå No results found"
            exit 1
          fi

      - name: Run Python decryption script
        if: success()
        run: |
          if [ -f "analysis_output/decrypt_auto.py" ]; then
            echo "üêç Running auto-generated Python script..."
            python analysis_output/decrypt_auto.py
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: puter-decryption-results-${{ github.event.inputs.ai_model || 'claude-sonnet-4.5' }}
          path: |
            analysis_output/
            decrypt_ready.html
          retention-days: 90

      - name: Create summary
        if: always()
        run: |
          echo "## ü§ñ Puter.js Free AI Decryption" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ 100% FREE - No API Keys Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "analysis_output/puter_results.json" ]; then
            KEY=$(jq -r '.key_found // "NOT FOUND"' analysis_output/puter_results.json)
            CONF=$(jq -r '.confidence // 0' analysis_output/puter_results.json)
            MODEL="${{ github.event.inputs.ai_model || 'claude-sonnet-4.5' }}"

            echo "### ‚úÖ Success!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **AI Model:** $MODEL" >> $GITHUB_STEP_SUMMARY
            echo "- **Key Found:** \`$KEY\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Confidence:** $CONF%" >> $GITHUB_STEP_SUMMARY
            echo "- **Cost:** üí∞ \$0.00 (FREE with Puter.js)" >> $GITHUB_STEP_SUMMARY
            echo "- **Rate Limits:** üöÄ None!" >> $GITHUB_STEP_SUMMARY
            echo "- **API Keys:** ‚ùå Not required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "### üéØ Available Models (All FREE)" >> $GITHUB_STEP_SUMMARY
            echo "- OpenAI: GPT-5, GPT-4o, O1, O3, O4" >> $GITHUB_STEP_SUMMARY
            echo "- Anthropic: Claude Sonnet 4.5, Claude Opus 4" >> $GITHUB_STEP_SUMMARY
            echo "- Google: Gemini 2.0 Flash" >> $GITHUB_STEP_SUMMARY
            echo "- DeepSeek: Chat & Reasoner" >> $GITHUB_STEP_SUMMARY
            echo "- Meta: Llama 3.1 (405B)" >> $GITHUB_STEP_SUMMARY
            echo "- xAI: Grok Beta" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "### üîì Decrypted Fields" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq '.decrypted_fields' analysis_output/puter_results.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Analysis Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check logs for details" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì• Download full results from Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Powered by [Puter.js](https://puter.com) - Free AI for everyone! üöÄ**" >> $GITHUB_STEP_SUMMARY