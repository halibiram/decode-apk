package com.trilead.ssh2.crypto.dh;

import com.panda912.muddy.ObfuscatedString;
import com.trilead.ssh2.crypto.digest.HashForSSH2Types;
import com.trilead.ssh2.log.Logger;
import defpackage.AbstractC0362x4440ab85;
import defpackage.AbstractC0749x8313616e;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;

/* loaded from: classes3.dex */
public class DhExchange {
    static final BigInteger g;
    private static final Logger log = Logger.getLogger(DhExchange.class);
    static final BigInteger p1;
    static final BigInteger p14;
    BigInteger e;
    BigInteger f;
    private final String hashAlgorithm;
    BigInteger k;
    BigInteger p;
    BigInteger x;

    static {
        new ObfuscatedString(new long[]{5061704804141556660L, -5247189380881268131L, 7509377504320703389L, 1818553319566082776L, 2210196216986911517L, -8745844430009048798L, -3989483821161561096L, -1591188913163046109L, 1410610880894063362L, -4277268416879354671L, 7217208087175178498L, -8964522298225192599L, 2005285514037539498L, 5724676009036991113L, -7003828257213954707L, -8504823219036878209L, 848370214620423126L, -1216222679137767010L, 4064554376281205577L, -1773495861231932584L, 3964441187719714155L, 7368308731652076236L, -5578954228366984804L, 9074391196182918157L, -2131778638863824656L, -4016057176741566110L, 866485672632509427L, -4950508776266158814L, -3608172850022713667L, -5441201162402690462L, 8541486590789000100L, -8362377876500940875L, 7674394739030043057L, -3428353629642225215L, -1566960917341301598L, 3975842745502166405L, -2921790003085728425L, 2202552967480959344L, -6907785838374487027L, 9137214040145397284L}).toString();
        new ObfuscatedString(new long[]{7152578577028365508L, -2145569921600868224L, -8748607409735725250L, 2425412596362115301L, -7092711038201700203L, -6971834185203792169L, -4636237951838473319L, 5437542377407483504L, -1340317272095834226L, 7114104801347525023L, 3561329719987714817L, 4739138310493755112L, -2260091256393866751L, 4339426582120903299L, -3030677714200985959L, -1923859747197834077L, 8178518809914893083L, 5317524214161543115L, -2422693304847686167L, -2258808177886371985L, -1686872410809257193L, -411771233044545737L, -2048386314461955875L, -2157632087427294562L, -5013627714217858415L, 8846229083348730604L, 5072656140284917704L, -4324194825638408560L, 4369192841613274782L, -3017359282692165859L, 3862707889711613505L, 195025009880219075L, 6475062581755798355L, -5243381814628927012L, 4629554776287168121L, -3617329414301475730L, 4465349174611143719L, 5584287514833268988L, 4350118348328707637L, -4186556938894873827L, 2039181117043038984L, 4277233049734907932L, 4266390480352522890L, -1412639285472638542L, 878536433978845984L, 1816091346368205585L, 1617785405929539901L, -528316976935456981L, 97768692877527689L, -7886246973324642726L, -389668377810377045L, -6958396872900486303L, -1337458621768336502L, -1105925681339245964L, -1475125392003731908L, 5924608271549222563L, 7615864671656521597L, 2384295416835237370L, 5986956259539963934L, 5266435437264369194L, -4167772491504627752L, 6209048315005637574L, 6566462666089737736L, 4071311924650083270L, -3167144444178944889L}).toString();
        p1 = new BigInteger(new ObfuscatedString(new long[]{-2351242696373585998L, 4236128538345663536L, -6158360310678393403L, -3558663352675099713L, 2046473414272024465L, 3320540583721172051L, 91937641834426784L, 7005344454097163002L, -8724208220846085446L, 1421699212829371869L, 175640224059755133L, 8927591235164232165L, 5969198286750129862L, -4011515359241199609L, 4301359220034210663L, -3490259332533553487L, -6027332243818065265L, -3637673918621957433L, -1614891197804685342L, -5454031876893041019L, 599494111136477145L, 4288120312083550527L, 541785607948901968L, -4180599207424017457L, -3227581946654486430L, -1789049104809786843L, -4049427898697663582L, -7579127690277009921L, -1600063291655684900L, -680872810373498870L, 3271253487285283906L, -8332629762400447389L, -2559722979200979607L, 8275176647352763764L, -4357593769523568162L, -2001115911347731480L, 4043516816167003815L, 6929324406633429316L, -2796666731987197618L, -5912154598512459731L}).toString());
        p14 = new BigInteger(new ObfuscatedString(new long[]{-924504707272322110L, 5371141793956039302L, -1037534465418357839L, -2374849282904086713L, -6742466613670390050L, 3629030536566283508L, 8086657947928358218L, -6561328917733456622L, -4678211481560026907L, 7176587105065725944L, -7408581702248426155L, -6317830662854258272L, -4302872356764339353L, -4226362447462129827L, -1920904709057925139L, -954501749684276463L, -8042129570461087682L, -4733465335516222807L, 7783107823881691437L, 1787604893785345501L, 3357926262056735572L, 8510902526961066469L, 6611865613701852594L, -7094451712559438740L, -7776326806796235958L, 653538422912112143L, -3778682355772198565L, 7071112996289360808L, -8859915963323958865L, 2979914573354169393L, -6021663297605806467L, 3874157762376646664L, 6512426622570000799L, -6255878429906652891L, 7307819113301912259L, 7493145758890962578L, -8728170701262486866L, -4705312242121719789L, 1950675355751769845L, -8032414279076294757L, 9126857684207512646L, 4741253405451433880L, -6613269389699636919L, -7118512872497337583L, 3515840860357562178L, 5391311519732326404L, -3002054990648224873L, -8996711891593267637L, -6120213825843225439L, 5775009624611521251L, -2912021333901443563L, -8672494989567306698L, 2166729085374017507L, 3860763597237215477L, -5049971982719832222L, -526875955644259147L, 1192738646173339143L, 8423784038715067396L, -5734457098136561799L, -6654674249402774264L, -8799450304404514777L, -7523747070458539767L, -309383138161226736L, 2465838005985833173L, 5083299325673474555L}).toString(), 16);
        g = new BigInteger(new ObfuscatedString(new long[]{-7680094026079172389L, -5864498561239934313L}).toString());
    }

    @Deprecated
    public DhExchange() {
        this(new ObfuscatedString(new long[]{-3435370112156392966L, 3106357449749895652L}).toString());
    }

    public byte[] calculateH(byte[] bArr, byte[] bArr2, byte[] bArr3, byte[] bArr4, byte[] bArr5) {
        HashForSSH2Types hashForSSH2Types = new HashForSSH2Types(getHashAlgorithm());
        Logger logger = log;
        if (logger.isEnabled()) {
            StringBuilder sb = new StringBuilder();
            sb.append(new ObfuscatedString(new long[]{-2933859357588719741L, -5052783264590103944L, 3119751507920480007L}).toString());
            Charset charset = StandardCharsets.ISO_8859_1;
            sb.append(new String(bArr, charset));
            sb.append(new ObfuscatedString(new long[]{546448523467407384L, 8159756026647260510L}).toString());
            logger.log(90, sb.toString());
            StringBuilder sb2 = new StringBuilder();
            sb2.append(new ObfuscatedString(new long[]{9001011973572958538L, 2123761685943579212L, -8940256904550496927L}).toString());
            sb2.append(new String(bArr2, charset));
            AbstractC0362x4440ab85.m2949xe1f61061(new ObfuscatedString(new long[]{-2157013881158511354L, -9211314170623866495L}), sb2, logger, 90);
        }
        hashForSSH2Types.updateByteString(bArr);
        hashForSSH2Types.updateByteString(bArr2);
        hashForSSH2Types.updateByteString(bArr3);
        hashForSSH2Types.updateByteString(bArr4);
        hashForSSH2Types.updateByteString(bArr5);
        hashForSSH2Types.updateBigInt(this.e);
        hashForSSH2Types.updateBigInt(this.f);
        hashForSSH2Types.updateBigInt(this.k);
        return hashForSSH2Types.getDigest();
    }

    public BigInteger getE() {
        BigInteger bigInteger = this.e;
        if (bigInteger != null) {
            return bigInteger;
        }
        throw new IllegalStateException(new ObfuscatedString(new long[]{7355463730764243L, 3634915742236994515L, 2181841311155951868L, -4004034500227103061L, -1031156515775072548L}).toString());
    }

    public String getHashAlgorithm() {
        return this.hashAlgorithm;
    }

    public BigInteger getK() {
        BigInteger bigInteger = this.k;
        if (bigInteger != null) {
            return bigInteger;
        }
        throw new IllegalStateException(new ObfuscatedString(new long[]{939349933642769066L, -8816053934424094909L, 944630784929618918L, -4731065425430006122L, -2053700838946037875L, -7467453441573750651L, -63172424062749611L}).toString());
    }

    public void init(int i, SecureRandom secureRandom) {
        this.k = null;
        if (i == 1) {
            this.p = p1;
        } else if (i == 14) {
            this.p = p14;
        } else {
            throw new IllegalArgumentException(AbstractC0749x8313616e.m3333x1db10c9d(new ObfuscatedString(new long[]{-1359922113087427960L, -7565348712666700322L, 7909173740135048343L, -1988942968834685066L}), new StringBuilder(), i));
        }
        BigInteger bigInteger = new BigInteger(this.p.bitLength() - 1, secureRandom);
        this.x = bigInteger;
        this.e = g.modPow(bigInteger, this.p);
    }

    public void setF(BigInteger bigInteger) {
        if (this.e != null) {
            if (BigInteger.valueOf(0L).compareTo(bigInteger) < 0 && this.p.compareTo(bigInteger) > 0) {
                this.f = bigInteger;
                this.k = bigInteger.modPow(this.x, this.p);
                return;
            }
            throw new IllegalArgumentException(new ObfuscatedString(new long[]{3176223050881019187L, 7692151828952953172L, 4916555237643082054L, 2428190193227427665L}).toString());
        }
        throw new IllegalStateException(new ObfuscatedString(new long[]{1382542687772091010L, 2508055271041435584L, 7031066783226582182L, 7317825067035961550L, -2910607874830716977L}).toString());
    }

    public DhExchange(String str) {
        this.hashAlgorithm = str;
    }
}
