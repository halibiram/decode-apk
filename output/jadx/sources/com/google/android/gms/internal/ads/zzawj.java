package com.google.android.gms.internal.ads;

import android.content.Context;
import android.os.Build;
import android.util.Pair;
import androidx.annotation.VisibleForTesting;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.panda912.muddy.ObfuscatedString;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/* loaded from: classes2.dex */
public final class zzawj {
    private static final String zzd = "zzawj";
    protected final Context zza;
    private ExecutorService zze;
    private DexClassLoader zzf;
    private zzavo zzg;
    private byte[] zzh;
    private final boolean zzl;
    private zzavd zzo;
    private final Map zzp;
    private zzawc zzr;
    private volatile AdvertisingIdClient zzi = null;
    private volatile boolean zzj = false;
    private Future zzk = null;
    private volatile zzatd zzm = null;
    private Future zzn = null;
    protected boolean zzb = false;
    protected boolean zzc = false;
    private boolean zzq = false;

    private zzawj(Context context) {
        Context applicationContext = context.getApplicationContext();
        this.zzl = applicationContext != null;
        context = applicationContext != null ? applicationContext : context;
        this.zza = context;
        this.zzp = new HashMap();
        if (this.zzr != null) {
            return;
        }
        this.zzr = new zzawc(context);
    }

    public static zzawj zzg(Context context, String str, String str2, boolean z) {
        zzavo zzavoVar;
        boolean z2;
        boolean z3;
        zzawj zzawjVar = new zzawj(context);
        try {
            zzawjVar.zze = Executors.newCachedThreadPool(new zzawf());
            zzawjVar.zzj = z;
            if (z) {
                zzawjVar.zzk = zzawjVar.zze.submit(new zzawg(zzawjVar));
            }
            zzawjVar.zze.execute(new zzawi(zzawjVar));
            try {
                GoogleApiAvailabilityLight googleApiAvailabilityLight = GoogleApiAvailabilityLight.getInstance();
                if (googleApiAvailabilityLight.getApkVersion(zzawjVar.zza) > 0) {
                    z2 = true;
                } else {
                    z2 = false;
                }
                zzawjVar.zzb = z2;
                if (googleApiAvailabilityLight.isGooglePlayServicesAvailable(zzawjVar.zza) == 0) {
                    z3 = true;
                } else {
                    z3 = false;
                }
                zzawjVar.zzc = z3;
            } catch (Throwable unused) {
            }
            zzawjVar.zzo(0, true);
            if (zzawm.zzc() && ((Boolean) com.google.android.gms.ads.internal.client.zzba.zzc().zza(zzbgc.zzde)).booleanValue()) {
                throw new IllegalStateException(new ObfuscatedString(new long[]{-8985488068889212925L, -516055555163043832L, -6919056351142945976L, -6934173709845309648L, -4495922690356818333L, -1193321734736585384L, 3400880414476760349L, -2839114862398331556L, -6197397821692953934L, 5505722092086443037L}).toString());
            }
            zzavoVar = new zzavo(null);
            zzawjVar.zzg = zzavoVar;
        } catch (zzavz unused2) {
        }
        try {
            try {
                byte[] zzb = zzatt.zzb(new ObfuscatedString(new long[]{8859823022814731774L, 6525619370564686856L, 102847967410248179L, -645221464558517854L, 5742275787541237265L, 3747676947128723780L, 4838498827148560308L}).toString(), false);
                if (zzb.length == 32) {
                    byte[] bArr = new byte[16];
                    ByteBuffer.wrap(zzb, 4, 16).get(bArr);
                    for (int i = 0; i < 16; i++) {
                        bArr[i] = (byte) (bArr[i] ^ 68);
                    }
                    zzawjVar.zzh = bArr;
                    try {
                        try {
                            try {
                                File cacheDir = zzawjVar.zza.getCacheDir();
                                if (cacheDir == null && (cacheDir = zzawjVar.zza.getDir(new ObfuscatedString(new long[]{-7193436325781057266L, -2342481986873169389L}).toString(), 0)) == null) {
                                    throw new zzavz();
                                }
                                String obfuscatedString = new ObfuscatedString(new long[]{-2279544530462809552L, -2783748728490565866L, 2605446514356063828L}).toString();
                                String obfuscatedString2 = new ObfuscatedString(new long[]{-5033172977774524866L, 6138661892796559561L, -1720120220766142553L, 8626204172192873053L, 6508174512819381771L, -1717152541548677001L, 1726605336368810893L, -4317880843118387505L, 3036521522267915246L, 2750514280839709972L, 4105479676871107931L, -533934177149849775L, -4803927084861273178L, 2974149444933552962L, -247104605058590701L, 4855305770033344628L, 8982890431408861946L, -5380602679637573574L, -5440638688098466268L, 1441097888643716893L, -6285875611197048810L, 132381762370985864L, -2429723655693095950L, -184144474060506025L, 6068243924060064291L, 725011911062195775L, -8142017157116722271L, 6273655655208237686L, -4466391939933711226L, -1248198767644744674L, -4361007970994443255L, -1355682206141887682L, 8024649837779034514L, -2491614515961258436L, 7602496057980403015L, -6355604240510684725L, -5392737847867437880L, 4765303568022738208L, -5696942855042814554L, 1951083785328764884L, 3585001452698354L, 2001813954894191645L, -4824805886379762781L, -7912853293940474586L, -1972596431455160026L, 1524948766283242333L, 8348067701886163097L, 3090653557228967514L, 4747181782295459614L, 1959057865127781585L, -6266083276069238876L, -221709534961549930L, 6284452983792992225L, 2889797637746729599L, -2111190436405951364L, -5040036318049709093L, 9155688000233131211L, -32536404803579351L, -6600704562809832039L, -7830607278684396679L, -8086125747691588186L, 108854339931929857L, -9082925346551337503L, -1454989516642926328L, -1040156143691508658L, -6281250198437220567L, 2745654544108235437L, 1916466476955895330L, -7644587615116541961L, -7233655170569540128L, 3909507422421223430L, -7206293462037363830L, 7922480588237727609L, 1254391476558198781L, -906556681922166328L, -4239589955531759157L, 5044732310404548232L, 2318931653610202707L, -4223808070435234771L, -7610526238072752295L, 4172401649021188249L, 6044619195938312234L, 77430258665318714L, -5219648334199409808L, -1518300559503181233L, -8504693378068570522L, 1067533599316530882L, 3628399050546328688L, -526921010883842113L, 9164238377985832642L, -1095795657544997323L, 6566268258552703711L, -1400538746919007012L, 5129035109646553450L, 9066660669546938538L, 3286037808882086709L, -3833146586899014469L, -2518843202262433784L, -7214308854992237011L, 7535068434524897911L, -8513930353823337600L, -8709959766152179601L, 8028682826051464571L, -28824650579959550L, 9218866626079211560L, 1097157287551496926L, 1116796353800675092L, -3440053178668461266L, 1339531563328792767L, -6025522632798512779L, -1263865435780257425L, 6116722808536808058L, 4254760115608159531L, 6164748252916134183L, 8900106475722940430L, -7898089177196182794L, 7320662365413936580L, 5482418049028158554L, 2076000672225876301L, -1871118920094872670L, 2557377056156690756L, 5604797016012822075L, -7730903460166984255L, 7242038319465902682L, -6296984168023927491L, -5567132091732138689L, -4966958332220330789L, 1919774397299465680L, -732353625295224750L, 5887003630327456811L, 3157831358018534766L, 7948302514038679703L, 4432884289514227008L, 4999643132654660984L, 7269663147557474492L, 2791194265847639354L, 8671175138700485083L, 3661101961871841161L, 2683060153708186290L, -4129910599127173482L, -1740498675487798130L, 6140105075536762090L, 2102840020002240563L, -47059759074632267L, -6264546372213918833L, 2569674285679694398L, 5164189984934405496L, -7463743637796363836L, 3764592683577767004L, -2641628910267957461L, -7824852900652364976L, 7827903609449747478L, 1687566430397863889L, -2984034084634308194L, 6674742242316252246L, -7465730820316175186L, -1253509256475811583L, -3966899818290479169L, -1416610968854997651L, -1093962522074774698L, -4136769659216727837L, -8765540457529554564L, 747129460094094445L, 1668157433911863031L, 1128242287472024420L, 8584203076011605092L, 4092716330710301217L, -402685627354445345L, 7268458626388361102L, -4467785660727195036L, 6388374390256329478L, -9073398658183477888L, -3367716411316079023L, -6729839272062333201L, -3778528291271041245L, 2599675465224490330L, 7322475452779214953L, 3036652293844101679L, -5834854225066540910L, -5640398675015775937L, -455898091951636124L, -1960513921128722389L, -415222423046388784L, -8567179261104230974L, 6919413288134040863L, 5570470912769468391L, 316638643095666913L, 2503649521804683130L, 7874523639660621605L, 4592916719515229243L, 5475289514449656618L, 6233861437681408598L, 7725306169357325883L, -1257362368747572381L, 4118120834519458020L, 3761368103342191076L, -7324566042243435300L, 2457659475105670158L, -6641344863489405353L, -1136995810758087518L, -8431876408516014651L, -3999004737767689505L, 191685075199661000L, 2703704953817763311L, -7749115424269711073L, -6925959365766167923L, 8162009434756324159L, 6240809873050057759L, -5421029785793656002L, -413326290557749544L, 2750575935315400735L, -6032988062948104433L, -1457838235850178487L, 7436190426881443096L, -5351177544692036979L, -1885489065299484417L, -7554875894209129680L, -7673492511861705616L, 4460231024266517244L, 4528825192583691133L, -8285107826097849411L, 302447830231830781L, -8607004695080100443L, 1834394228962500850L, 8561446942541335009L, -84739627987854068L, 3998688096440637309L, -1025949471196270809L, 5142641473961063123L, -799919523374404683L, 7477103829061465402L, -300908607121479212L, -238299507365640349L, 1509495238292519195L, 7650111461383599093L, 7229377355176837894L, 6641312763516726565L, 5216661591784486033L, -9040992065376662038L, -620380973059521126L, -4482647421856742515L, -5203159047484810074L, 6937430621684690391L, 8659943199765259570L, 8060175419520220203L, 523724498329402058L, 2558775067659003175L, 3114644537625580735L, -4448153632225000516L, 1584403503871390545L, 1448488291118853968L, 7603496083390325165L, 1357913350203125261L, -2092461730398126368L, -3369191814495325250L, 7943306462031428788L, 5325213225180708941L, -2598753507071997799L, -1532936653118759871L, -7517074301543110706L, -8265923555568459927L, -7952422219528910620L, 8523269287570176570L, 2987889596824114620L, 2743342910183629884L, -3070410133294011186L, 5642998455991665543L, -4732353726552997855L, 6068741404166478718L, -3832878628942221547L, 715769289568734805L, 6966475696886189742L, 1768611351674521644L, 2303991090350887496L, 5678382317486463927L, 6806257862724088219L, -2130737948027746887L, -4009290694696864698L, -1014229727992040110L, -7235560894607145887L, -8062342027852422560L, 2094461814700715805L, -3853486818842089370L, 1725893943698799289L, 240701920323116031L, 975813501895082784L, -3770575499024690411L, 1641764410299577946L, 4201529955223945066L, 7294595777628088007L, -8767455992805809150L, -5151939373320296127L, -5782140316056062813L, -5880166200922037603L, 708515754201447291L, -1176462359061006255L, 3636440995292818582L, 1877579027855371190L, -255649523826890541L, -194431184935520167L, -5047340548386482145L, -5377733648375828015L, -6032142604432995982L, 4223710449308642780L, 1230319187391139836L, -1277438336956045893L, 6773570430602768440L, 2773135056493819188L, 7379355863092362933L, 9081336072814618694L, 8618886517550118822L, -6609527497261500569L, 5399251223186470828L, 7958379910732956321L, 2570162059105710175L, -6829712698834328010L, 3890151691808273742L, 3340477301607357182L, -4948836717752177745L, -1841216776731903464L, -3319092659871980407L, 5556369470309876345L, 7353985263950020650L, 4081496959731335619L, 5094499771611447229L, -2247540310051204134L, -8849375374737147592L, -1179000532923654429L, -8989498512423995907L, -2820656375063164841L, -7298350281411264499L, 6572282989867777629L, 1797802900745743140L, -1546883646161666617L, 1120150913183281685L, 2385083780343935289L, 8937409333505863805L, -6364894779896794491L, 6509048436086032904L, 2245841423193370302L, -3838374598685908890L, -240432860751085924L, 9040421108757420420L, -7988003516020882533L, -599384737606524669L, -9108270753094484182L, 3979584299294742748L, -8246151657045532421L, 3422351442336942545L, -2442492779423701988L, -6465664487487554881L, -730977799816742170L, 5685071993623047428L, 4938846636591952413L, -1914172226985067562L, -243015969562462323L, -7940988664499393478L, -3671905111062475339L, -94514616241031783L, -6532561515758162118L, -7879141914847366866L, -7562789409091057030L, -9021251643002826318L, -1125896992309223643L, 5149993484410270921L, -1423950881499903837L, -5209115993556085536L, -3467547826795323335L, -829394432533507566L, -7180960300988364296L, 8641177022268201143L, 3921410780156783386L, -156152066679640746L, 5225785811945408723L, 7249767491111410805L, -2316103983251276840L, -3077546212420127966L, 1690821819128181995L, 3338170698292674894L, -9065783499483822712L, -5473572557167624205L, -4725332815701857355L, -6093289852130757922L, -5048738680872605053L, 4335275353367960713L, 364006051412554344L, 1373069571122608605L, -3938650680189944862L, 876416332785500626L, 7785408681857232350L, -419354085238330614L, -1255077256116735339L, 7519999152131387044L, 2902509057424084427L, -6646839993354100375L, 6202398705047806042L, -9158444377651077421L, 4339687261008293345L, 3404207230328862937L, 1428587895466755212L, 1004727780023905709L, 2520585424711217588L, 2432548648691671379L, -9141722259518265837L, -6821759385931192600L, -9174850694262647274L, 8744578475033454587L, -712473395459268893L, -6783674832529909509L, -2996497747298284758L, 4765912235900141841L, 7354028685393348557L, -8602396979171701072L, -7741985983597738440L, -5901763252419686305L, 2117552886414046495L, 902178249453344915L, -4386199909596918839L, 2445280630420538215L, 161222875591300378L, -8596906287430947186L, 35100030199922960L, -1455000823435415604L, 6451153851633925742L, -7766399510404239370L, -1273493421064354806L, 3757051175601232038L, 72775073058981004L, 5761771572663934716L, 8167259643118388619L, -3135704864278145199L, 4840870699022269075L, 6172214028280280193L, -7806669472564013559L, 4652332146503918199L, 3375562953643978065L, -5042174807460679581L, -2376167687293237535L, 5354615299532972935L, -6080320434109296537L, -7572688196641175398L, -5905576443171616380L, 4875062305499480802L, -2374814101027002410L, 6190121431930769021L, 4419244050241625887L, 5324272429016472998L, 8228939620434677339L, -164722623577167504L, -6488816480132272168L, -8161158044366561192L, 3162024311577069502L, 4975057408351688982L, -3384122909267180981L, -8662837788280843159L, 5369605052948375700L, 2150951264093210843L, 6705543155804514699L, -3774466205691061986L, -1409310066966966959L, 3476888159657958914L, -5610156329868169585L, -4579158934427077529L, 3354427939236473411L, -294477372776104494L, -1250490532063724495L, -1810835903112659165L, 3860151861254568241L, -7967519488865772015L, -329371824501067045L, -5829885872371664536L, -3290039724956243529L, -5169936285143910651L, 6366139130999406871L, -8174579898543049557L, -1985423624122548719L, -9147264390622765220L, 3528534906998163417L, 7434620143158273509L, -619948737182221032L, 6737270797698125518L, 4817173779063613527L, -2812592242293605317L, 2147951237575590995L, -5526295281516781019L, 2829285358156905062L, 5115343703582033468L, 6839773932892241639L, -6335220041285372378L, -8942055536112299502L, 8719038150097125218L, 5159859857449217078L, 7369560451215211408L, -8724318242058003636L, -1946032718512770167L, 8897922997163188517L, -148535851403651524L, 423051261020893956L, 2164685069496129604L, 5440241873797902411L, -2911642061007799267L, 745412451557948398L, 1123727339705018492L, -6614505955088932417L, 1567445473466535081L, -6608926150132387846L, -6828851973017020163L, -4722410212608287251L, 2473542969217999625L, 1026261364774868199L, 6209001603702633629L, 4645208625425820698L, -7622000147533015142L, 7780087086433738039L, 8863005940608764832L, -5647799068602521094L, 5936433837993910372L, 6695638234721120903L, -4204597666802912868L, -8804668651559134169L, 9174156616751936874L, -7436875459142851908L, 3510961855601179917L, 5667707068924557467L, 2485985014313966649L, -1928533107747587108L, -2868461581049304404L, 1187177787263139912L, 7574022065423957828L, 194470144519314749L, 2485617637322872003L, -1535562432785999522L, -4823590661231644023L, -4564121743181886045L, 330468097597135074L, -3295070880511927101L, 3409548491312552364L, -3167224740875179918L, -7090346661676031379L, 5104906247424667003L, -471654315114717644L, 3294537554390720703L, -5666256741152933577L, -8549620159719141181L, -6249446444225644896L, 9041768499134405723L, -5272741314139224987L, 2574948035308715440L, -5954378835507708758L, 5774905068547583548L, -7625007325952121825L, 8257419245490961029L, -5340704898059226687L, 6981605834808374465L, 4562906609361223378L, 4510800051984856342L, 4882134238547266680L, -6424481119701984471L, 4267762414054121450L, 3498468754735756689L, 3073724230569839581L, -8193175080809509876L, -2317536899913580917L, 2400757933641397989L, 7852331071506688108L, 6350026183699365916L, -3275958722068662111L, -6942533147823161422L, -2395262210335599740L, 2021748813705189255L, 8842179904655241748L, 7892536424312952668L, 8195071542598553614L, 5456563550829173854L, -656919312626482584L, 3175519311806898530L, 8018254990100087383L, -3059025263144590220L, 1172447615778987162L, -1705968307452265541L, 5120721484453330366L, -3347192092907676203L, -4402526888542306695L, 1730867435240610520L, -9083778223352494078L, -2632724660747541252L, -6837068091143237642L, 8827713982715726746L, -7051354882052201231L, 2317887659065468629L, -7154958594840401092L, 390749899792490107L, -1382116307170039710L, 2172229525304102794L, -2150652439177297892L, -2758455169739670979L, 8793321133458668045L, -6671680919942646139L, -8607208898861027335L, -1395742626113698637L, 3140374404615569814L, 3445405500070490164L, -247845511873870698L, -4170311013348244256L, 4774770214311271401L, 7997691166506925124L, -1210068796457044597L, -3931790259477460289L, -2060190996601618723L, 2984554944017544852L, -1177498201830292024L, -3333909968301526628L, 3575826350789730093L, 2661446278716570527L, 6311645650877106936L, 6107591526573701595L, 5297538302090038344L, -4770204900935504700L, -2274129252421838048L, -668965201747539007L, 1726393684739208086L, -1717531370143505447L, 5396796564184049844L, 4314689880612085136L, -5078109632121861105L, 7144794189761060003L, -9102733350814659833L, 1240069987984711167L, 1237765896911973315L, 1444950241625429059L, 7068979628715092387L, -3755781853937437001L, 7650980683485782828L, 7165245046857084675L, 7352190107795461999L, -7880052069629337582L, 7994645449714339331L, 4308175889837029510L, -1434871586221676982L, 476068068724000246L, -1821642261809628958L, -1024109623336498531L, 3819565723221111371L, 5519210104886433247L, 8178417144329577353L, -6348503368958627252L, -3447353543138697251L, -1174423603108381658L, -1389082599219358412L, -2020378747919837625L, -2389222430576363718L, 3316708276368561045L, 4611136687386873148L, -6131659277524764936L, -1575759011895610753L, 6177638557309364605L, 1717161028848809934L, -1471068856853538875L, -953555199134749869L, 3065690458564559817L, -8350591702541986264L, 6594784723101138420L, -5794553991939367591L, -4417428016141537779L, -3278175973543234397L, -2636366537005276522L, 7563830336055697192L, 664087804001818233L, 1655226172360533912L, -3278875056008985301L, -1052354657620326080L, -5608359031297002755L, 1415149375925932515L, 4285082403993684092L, 463578147295121752L, -7455891911577231094L, -5314815777793629100L, -3321505314025039625L, -1836888770736728645L, 2449498281852536391L, 8164833859632668010L, 378865694221689493L, 4661693406610625635L, 479530845493854330L, 7280506926842735256L, -8590240676552776592L, -8498719459623036541L, -9153850752752446636L, 523587693928492000L, -91518856723012808L, -6742391246115051819L, -325886648015000818L, -2550431912452166504L, 3708531027927689930L, -5225473224261371549L, 287726961540756835L, -5956082586757108473L, -8922944903772228824L, -4136714112867614549L, 8202618169734792385L, 2626170898058808979L, -4191132225849968616L, -2378107103441507135L, 7358414310632492141L, -738094201759356698L, 6283046510830628927L, -2108697571218251051L, -5406027134500780622L, 4652670109665743323L, -2111475002371856038L, -4091776883760353352L, 5290473646937312880L, 7903378761562455329L, -8135356205363105226L, -543959426328298787L, 5910552897791517055L, -2850321741064293546L, 8421740417694349824L, 7133664088407606375L, 1598863997739347900L, -3777721276188131751L, -6622920055749953617L, -5141552802263962600L, -7697853303691279968L, -5109258753741113426L, 653022888970487166L, 5642029356066514600L, -3221232889454835501L, -2344641420364423729L, 7023065607301567306L, 6560081522056146930L, 4784386099512047103L, -3549571297163120109L, -5163839431795854177L, -7923907826503044727L, 7952807381485943606L, -5079245222551027708L, 4256790105534689850L, -2434723794168230512L, 5265856775583116813L, -6200974114771912056L, -566274269097771641L, 9060554243902819374L, 115108455816726833L, -1574047357031974152L, 2004696772542552314L, 5627474821753156355L, 1791338512116116644L, -1778919256566672882L, 3207323569282379147L, -1106510900342770094L, -7741646598788785083L, -7431043345421781626L, 4100365000251736077L, -1967904918906495235L, -8711949082686737660L, -169730994553500551L, 3226522736541693089L, -1063100079583515514L, -5199762500687588553L, 2658403458140404111L, -4614349711377786207L, -5030940626016287034L, -964877575854510842L, -3707921814007500525L, 550028661900696846L, -3438989710136985033L, 4218787057686946599L, 3693369016681964829L, 3298854650888140103L, 1621893345382641279L, 6325291905761083352L, -5905400959718627084L, 6489331548280490275L, 2972479700582300557L, -6811989504528648847L, 5445379001019275740L, 6879495253643295676L, 542196591986983672L, 6277645774300670652L, 3192172257298952498L, -3731550234153023842L, 1836247617065861641L, -3033342240542364430L, -1480517830166937090L, 2929284840875546240L, -6580697771612194535L, 3709028080044911152L, -7278430052989938501L, 8140401512636653716L, 6588916212308156785L, 542282648097558072L, 1876233343532081206L, 3922407647231212234L, -5698373460522696928L, 8210578356248804584L, -8655103195390297280L, -413858401759784370L, 4557912157100504848L, 8014915092753850385L, -8407888258264192680L, -2677056982231907214L, -1543799229598704748L, -4540559485769577616L, 5203067879929440205L, -7451059539038023930L, -5616315294336489728L, 485317950845367914L, 520205341511164607L, 2895775636495562205L, -3837128747666173586L, 9114888792256630449L, -6499993222289819761L, 7912294840518267768L, -3276600286127263547L, 1160698205502197723L, 1663031149347236249L, -4865116725027807443L, 1183066246362378868L, -9151276938555562399L, -5037340105414074880L, -5365133293115908786L, 6116900647747579025L, 4577996575501493903L, -7187584338415891482L, -389780696416941121L, 6687566268642068838L, 215485985407255895L, 5297574972457288935L, -2350940900119814109L, -6383959581370156185L, -3993308124957821446L, -7150394604028788179L, 8098300682085039110L, -445376740212214192L, -1868726029600633902L, -7578679809481525340L, 2982163455196219642L, 8154030450450546414L, 529164919998945591L, -8304575995701828056L, 8501458588180123876L, 1590677251903806092L, -8504897219695622166L, 7072740350570070717L, 4316857733064686807L, 1910758223574308133L, 7243278290815808013L, -6809572855353990253L, 5432076523595356774L, 7386568605772629882L, 1513360626144109532L, 2141738597572346320L, -3933592917798671747L, 1386591730809282317L, 5007611099602423598L, -5686493253438884462L, 6262470628343868373L, 4036036471148466675L, 2502365923055327341L, 4904040961017586438L, -5185839847623915660L, -8384814885106818511L, 9083617163313231096L, -4623199343525074787L, -2163852887891496768L, 1080507140665765232L, -8645336295184601954L, 5151279463851047773L, -5470077179428668160L, -2704982137253108773L, 8534370691081381389L, 2841749134037971855L, 8448179101315663923L, 1680062897221676822L, -6568134459452389532L, 8592495640509246971L, -7090937132642588845L, -1251764540886340688L, -5227111855723940391L, -666552252121625940L, -5144446235730740032L, -3862265389149084977L, 1371919546260672885L, -1739562093740170062L, 7661657391581769537L, 5979276287498897783L, 7397889892770222892L, 4169400508600931287L, 5673876449154637578L, -6372217162027002319L, -7654747474821949458L, -2963414825154427960L, -1844610153847911744L, 7654457068252798719L, 347701240447238131L, -2879246234937222206L, -2003723199699757944L, -1465278648960564463L, -4103633406860579954L, 2696177336114975381L, -9143270780204157907L, 1670747153344346304L, 3507304925688152106L, 7092469946883863951L, 1736473070920478504L, -7943668267384991506L, -855593169082476192L, -4712865477670468944L, 1529508343246740063L, -2861221852409331762L, -7064426441999730985L, -5391370829012197039L, -548439018119410031L, -9001862173269797425L, -4567011156324860565L, -1971073613523416921L, -1087868491609764494L, 6741387195476775274L, -1003008858264136123L, -5224997569842142770L, -3894240931028046401L, -7240266141180977395L, -582732154960899674L, -6357735523636678421L, -8290669551285113932L, -1485050148989584504L, -597784173916287786L, 3367643857492637468L, -3221372681615729780L, -2138761578037023564L, 4518496375843825321L, 4716965983124858165L, 1408804209866195998L, 4069217052028887053L, 3852087669606014023L, 4377914561464756760L, 2752977063493743148L, -9119720162487268327L, -866659692374443300L, 838954639859258159L, 4508865346870251400L, -7681347247193943075L, 7556859902598913599L, -611978093656978775L, -5992030122295498412L, -5597858383745263480L, 5467674164964780972L, 7047169492166014816L, 2745945885199168408L, 6263917883823467874L, 2019817565367607648L, -8504147699624319317L, -5745497328316897774L, -8567279456486832403L, -3235421328799302435L, 1535561141388805567L, -2127798251902452045L, -4223393381110246986L, 1503731869841231802L, 5578525391750086943L, 8140674721648327723L, -6909074634045808705L, -1367593698127292478L, 2209149878150443071L, 4918345050038526711L, -694819511541894094L, 3080582154953428477L, -8822269022164371615L, 3004906782979478410L, -6583793243987685741L, -5315273482287325664L, 634161403980610537L, 467068455895819539L, 4522388238052042838L, -3383672375078047699L, 4114057757139322144L, 6310282982167468779L, 7496282503972055431L, -7532109866742860454L, -90229130859485929L, 256885620926943241L, -4810806452036607808L, -3585536500752648660L, -8011105503119381007L, 3347171974719608980L, 2860155072370862043L, -6226031095767485579L, -7952986234710305804L, 8535127006329016780L, -581399452936852645L, 6949942985667884996L, 5054083255068403678L, -5815027618124401968L, -5094288651145757469L, -7915163277938097937L, 238259037668267019L, -4959682192356032356L, -5954306075657472341L, 4426350797716786534L, 
                                2134182896973921986L, -9052791277533902250L, -2036334080766897168L, 1817092155082429181L, -3744258832339098892L, -5391535142809772660L, -4777216587449016309L, -3882142472414025402L, 1283167730847075714L, -2656897479273010793L, -8567844285856611632L, 7308458387168679009L, -6349114920587108673L, 4303696463589840099L, -8040519563654786021L, -7818379257799488691L, -7652773602287535361L, -1665207619536460334L, 7320884154751812401L, 4041955923410143178L, 6633290177973586282L, 5216595153009001290L, -3275324033277172330L, -2022624713078183871L, -6967712795746349364L, -1675964402047933408L, -606013868703577279L, -1418953670916788903L, -7084764244950844297L, 6439937902068221333L, -4020743372737353341L, -7596469014655890944L, 6714214608227118269L, 7770352245127606845L, 7675982855961668579L, -6784467113923759260L, 975066819557901172L, -1275569162975244672L, 3502043366987442458L, -589224388758977199L, 6768049217463851005L, 4764990865518922707L, -5590866823373253017L, -6057583377185902263L, -5124542264237437786L, -4825716757699797199L, -3304497977373975228L, 3537813337036298085L, 1205552117869165519L, -8470073971631994781L, -9091385999736279529L, -2854858265309266636L, 585526252260763974L, 2785095410950438164L, -1893729650704782456L, 5950774733558370930L, -5886000862619062256L, 5123889876446243711L, -7647948568843650340L, -6959640235335815484L, -4250504962486521767L, 9217003476651302060L, -195295962028503712L, 3590791460029985563L, -37658031341486063L, -7604601862849071481L, 1809316461927547144L, -7849573947931034656L, 4098325514883956347L, 676801987070774965L, 8555943406613678688L, 1447045797143751442L, 568909556286814857L, 955552436099832916L, -6446427822947138689L, 5733652785768858621L, 4281532541858114893L, -6110271303601019062L, -3411979901818163756L, -9124377570120179124L, 1683676097267311741L, 2716686214142765271L, 2184175065119203698L, -8142860502774248427L, 6822786761579252698L, 5627644529633513568L, 6500163065487817086L, -4401319385298959568L, 8524179348870473511L, -2895175097396734912L, 3632434764382891557L, -4811495294550471048L, 4898266178451422722L, 3605543467834370767L, 2953217052923064380L, -5063884106490896153L, -2128629910525410279L, 4795425101652344490L, 784322067544971769L, 139129890128555844L, -2499811421264595299L, 152509946788543068L, 7243321398384890742L, -2631176428953793324L, 1674475525480407529L, -4746415912870967881L, -8298633366997784329L, 1540498502398284388L, -5796809747885479995L, -6602856648049593141L, 2233107013086560632L, -3532579282013885199L, 3062274469936937873L, 5047200151026637381L, 8261391218253072093L, 4629188923972305991L, 1562172363091170414L, -4755806938018922724L, -8874182834066027418L, 1417661549849016169L, -8116731183546277898L, 1362426223709409175L, -4792618761285893245L, 4473945026873217844L, 1197714789146807108L, 1326124687033340584L, 1536361643078878801L, -6205306412819744931L, -776597356524382132L, -2440892810170285339L, -3615515285321029366L, 6459240089422000493L, 3740291448676909106L, -3046365944132942698L, -6502431318667352445L, -2383520796606617875L, 6921030151429992695L, -800548432838740005L, -3825589313948721450L, -8759514887065457323L, 5157512613391282471L, 3510641283199147047L, -3671846166506175806L, -2335929263662310093L, -1203993972425186078L, 6343009166235105464L, -7431734793925152858L, -2486866141003851065L, -1347376682023136112L, -8372608394210002401L, 724518679206953044L, -3284548352833545052L, -2908516228917460729L, -2009616319566345130L, 5465117491240700430L, 4867642761515676244L, 8840535109957587636L, -2720096985259873879L, 3137506304318507217L, -5234932978787490056L, -9081920926066634035L, 9129148767213496610L, 4034079751775033527L, -8341000262546342821L, -3874864678461298753L, -2731592143775612748L, 6688769200236581517L, 7478762448049981075L, -3078169863834560541L, 2549542090649748295L, 2929893727165160530L, -2541532178691199130L, 7874097955146607508L, 3262406872822076163L, -2040077972722097101L, 7685072499274104840L, -4760478707487639793L, 4199340973019233575L, 7336391076298796711L, 6632971385215819433L, 4440185288719545401L, 8539753624921646159L, 8668016713162642474L, 416878742058520050L, -7714936164508028310L, -8936691304567951642L, -5665671061655837182L, 6962508689803403346L, -8889622530897940460L, -365821346539039732L, 2639565096102872132L, 4686679420035013498L, 7504404336285503023L, 7959336165481740626L, 419680627421492853L, 2265845826300961233L, -6458766278724819487L, -8680130434044318474L, 4784526589022666648L, 7033110681285686034L, 2916875708451536750L, 5169410881541277599L, 8671498506207078138L, -6526756541776336993L, 6985823826591928887L, 7750861602761342268L, 6051200855532359816L, 3234494579147546585L, -1630001150907783179L, -2562225396441711622L, 3487980191401369105L, 7129189389061369932L, -6724830144218123089L, 4851158493860758461L, 3559926142284948370L, 8372819810148201983L, 8405509882216950949L, 2700684256437069545L, -5567038828647484020L, -4070464804303454507L, 7236818042294701642L, -7782041989793354881L, -4955248497169048373L, 2879881133689384470L, -1551751028225244690L, -4019835673127528780L, 7508781080119973887L, -272712237687450479L, 3109271393814238209L, -3872721680415083238L, 8826749302297667301L, -7144169582515879425L, 145309904876964825L, -7212529451314615414L, 1111574769616873500L, -6642082863124525507L, 7118578196282795924L, -765650766707353562L, 8223416054112340579L, 2548830147922312104L, -6637735327109855056L, 5505996073842627921L, 9173711497122185834L, 3163108370949446453L, -8520683722621170731L, 929679864039348464L, 4227200262274560863L, 5034125686268600606L, 7870170277414835892L, 4960293520786471765L, -3831146361672339631L, 3267706891023663926L, -9030903586542231289L, 960535260794782744L, 965233367463464080L, 7305696144396513820L, 7843366077756378934L, 3999088357666873177L, 4184445757641727829L, -9064078330980224545L, 1375071244839272189L, 6819038183841598579L, -5719857766740868260L, -9081644974657622938L, -5363924232113088640L, -7860541064232550645L, -5038496122645549325L, 1208658005401609304L, -34301447402195701L, 5570692144403698447L, 1668450539659179319L, -6593739029426584706L, 2068382780109659585L, -3596792232073957745L, -1641298238966768795L, -6817402723867618538L, 3162405312217716098L, -6626415239278032514L, -7935082173799489106L, -1124280306184508529L, -8469820494151483210L, 1801136496053573387L, 5311484471093435444L, 2776037830730476933L, -1563879156659788052L, 251539257529489810L, -1434485117723826450L, 7223758193487464361L, -3165078810710385086L, -8382235575824006587L, -7848263110691899041L, -8112559712269047347L, 2351961270514669480L, 4572057284778001204L, 7840122116787851684L, -1837614781930070518L, -8437078340770650549L, -7949303072979083836L, -848614977415403993L, -8754678471825611758L, -5512233150810544536L, 1298310222150079663L, 7913787135929716827L, -1172878241028582426L, 1809970571392617180L, 4271166723369974390L, -573058953647278643L, 3590586102283876398L, -2904790029217562663L, 1697546171039627650L, 7360433289729898046L, 3176420099843138258L, -65727089913708950L, 5151424985168123544L, 5745302531497304527L, 241835051885132605L, 6545023179016140238L, 5284318400415755269L, 6617621356131949520L, 1287926001427036743L, 3579882248717403313L, 8065904735641273555L, 4554079242188833650L, 8017841848980387833L, 7948569587505288426L, -1706312617387898289L, -7112742516900501446L, -853290153058754964L, 7664979370982306343L, -2138150534297003861L, -2709423080011205775L, 6516498843793320596L, 57312451645128644L, -4916692824471718587L, -497355088419984074L, -6064826693372071753L, -8779723016643969564L, -7209554047318388724L, 769866374502403566L, 3508176336894021702L, 7438019379646633512L, -5481404179033966611L, 8387179243012086467L, 551557244878978109L, 150779826657711439L, -644019377126280763L, 2176019319117083161L, -5947629781807084453L, 2257077144227892666L, -2353576636787283568L, 5311986578802651585L, -5651394175645264142L, -2051431915335032735L, 6024265731025969374L, 4867283174366422264L, -2590109044698864250L, 1254710340312289201L, -3895553148840483390L, 4957631148137958875L, 6920498955213119100L, -3673898721061354665L, 3286873880843193236L, 7873248262843438661L, 4942401827252293949L, 5309715143955188524L, -236453924012219483L, -8102789158116052427L, -5622928750307791461L, 8809393894187810519L, -494332507618562050L, 3545444120825546093L, -759352297506451114L, -6324254802661054424L, -1979001967304360898L, -5299649694387336442L, -2862089919701747895L, -5865884181078958486L, -1981072577378811471L, -5566448365954345189L, -5047083541777814480L, 4417675713148397242L, -7952969485618786136L, 1629321805942716275L, -8538658063524410697L, -5416166762411927784L, -1391537857627117504L, 1936424637334225199L, 7017102126147377155L, 7580583129530552711L, 1208841629480300438L, 8029530243587068063L, 1093064690903439654L, 5892311874645677749L, -6390966078115634767L, 952444772314843849L, -4953543098157677543L, 4135458548185727887L, -7200649035948307567L, -5982321248751549460L, 3364745230156839119L, -5036798926870868288L, 7256993993281663189L, 5620204936627102500L, -5459715701553915416L, 8230774316889512123L, -5998375034691442832L, -6872988415437347006L, -8456989724941992680L, -7509507068733464919L, 2991463322782918425L, 192010102529720610L, -3457578161166520827L, -5992435139348451499L, -4863221161659989212L, 5512623513178685958L, -651466631066899187L, 9015915444582758211L, 5148876753751454864L, 5762322999622209087L, 9041846503276128373L, 8444343263360244556L, -7915901775025196246L, -2222865682008980804L, -4955663185164695342L, -4417529163190021701L, -925934902728546901L, 9100570306156810966L, -9024570086555293433L, 6445740459968478679L, -6664652463022643188L, 4817112166043632917L, 360698784851323855L, 2192611709189922474L, -106725201170617726L, 5999303272003923983L, -8085882361856164996L, -4528583554108847023L, 3394129194788003642L, 4662643766952241624L, 5462343186564741279L, 6738599912678247963L, -7439219107063432532L, -6662403297318315276L, -4248326783791238606L, 5089094728889645160L, -2134537968688991596L, -7180801104909228339L, 6645669298225418130L, -156907116545895309L, 9106354084055742449L, 7814567599461189268L, 1930960641550685830L, -7934345553448079302L, 410571850624507752L, -5499239449358762144L, -1008751533975311808L, 3192396882076564787L, -9036705609850651249L, 4350202388395739106L, -5336464108648975953L, 6411671842513926641L, -3412348784707238372L, 8935304052583278613L, -1335294532360381602L, -108405005017220308L, -6543289945443830241L, -9067204305647332468L, 8635704153920549055L, -162489810394474709L, -7445092111100659784L, 9146740980785395541L, -4448244720931432270L, 8346451986332930165L, -4557928747425440946L, 4908373982843100580L, -1803062908817252940L, 1983362711891810890L, -4939630810849013401L, 5115031119361726634L, 128721550711218131L, 5126678279363329947L, 6499452431766154859L, -3923849569534297063L, -3730592409157755217L, 6426081122162910690L, 986517859568985506L, -3234567488551978904L, -7021232562955994580L, 1410866572754283812L, -7550182576583398630L, 1723271571570959861L, 5548155479470678730L, -180838761446105225L, -7469653468158237590L, -4849591055030743022L, 2316998042689732786L, -4180859663203864980L, -7288107926184408562L, -6069803897460325961L, 1913749065164114887L, 3644911274489272070L, -1225199254790846280L, -3825103486191600256L, -4360217764345382302L, 4939295566280690559L, -152424318541375703L, 5013943559643889946L, -4050972571221800650L, -1615847273351808253L, -1919489494555748664L, -2711679563259631985L, -7728593029537453173L, -3269253047553775209L, 2210793805939335006L, 2668453636589245784L, 3726257564479747237L, 8862809258533570394L, 3972196314413559704L, 3296343834680771266L, -746969857749784440L, 5224905967386385835L, 2660004796379313195L, 979206370960898872L, 4574886437339548991L, -6963145624004936742L, 4413221506622417558L, -6541634031999334306L, -3035985210757680916L, -8453051931104135564L, -1273205087559260055L, -18760524156402901L, -4366851813768754583L, 6677210072514178078L, -5756041653182204172L, -1736432586190856274L, -4656720610361016369L, -8078527839744741692L, -5282574522928699978L, -7115545374134013405L, 1190852959777635713L, 5679995680766366176L, 1555504927943289213L, -1834333778387356653L, 4924274364295972586L, -2397531484176441037L, -6159894430202909656L, 6735740137505897578L, 5924630450106282989L, -3701754688794612161L, 3783957070569124473L, -3628710136202617040L, 6519905135711697803L, 7245192250829807509L, -3138405556809908788L, -7465909155188250126L, 7430088327719226168L, -4020201610875507549L, 2885524659291261742L, -8408337459936754540L, -2533669213493469653L, -3268396788686533432L, 6742064921977429300L, -7735439307088847284L, 6992593645960628705L, 3289877533870548438L, -3483232225895194315L, 6093643826230881248L, -157646225596675777L, -6363037658570427268L, -3627447280607694690L, 2980449681466560072L, -6464593690161278437L, 7273668721886010512L, 6442311612351854088L, 526500569895326880L, 8755850223415594793L, -8663428941758752511L, 3496952530065197261L, -4355488841202793597L, 215412289789404778L, -5664804339202887732L, -5662980936154863499L, 1003354670311305279L, 1188242656650419700L, 4542952271306723561L, 5105495738040445330L, -4096655415202740289L, -1563687174108807103L, 9171239405474147096L, -1333856193527007044L, 3274760201823390644L, 1115777174609780958L, -3239009930965108564L, 5270709370487221444L, 4620925866246815848L, 6470823746158991210L, -7254208352231441055L, -8151132970940401088L, 879032291648736109L, 5869770394183154567L, 8409629346360788188L, -555849075697871614L, -9022531943124692777L, 7053770716367550272L, 3027252221600438803L, -6769749100129903923L, -999403631587316745L, 4108632996681894264L, 8584197938857081753L, 6429819205007520814L, -5562570210736973033L, -967124683123453258L, -5616269945162736365L, 8493558771068410480L, -5323957178895794493L, -2057661351095481737L, 1639437604014494745L, -1214121125183904579L, 2006607683502378755L, 7651892854837561499L, -7239859661063086246L, -356945845089705224L, 7337533571858497507L, 7327619682783530454L, -7126529084135507638L, 6286961682404603782L, 8338572447303236940L, 6743687667915933073L, -8111209610086151694L, 8385552692405206095L, -112068452274969465L, 6993395744143945318L, 7261924093726334110L, -4076875269429224988L, 8740903398742649446L, -4497233442290165833L, -2370450560472496280L, 2204547832645869414L, 3274173026634878902L, -3709739355206982355L, 8412517267687228002L, -834865256469463955L, 1129993968915119276L, 1006259876811110376L, 2081262978806141049L, -241360331356589976L, 8813360230649752439L, -5921805171199612050L, 7608889192883016237L, -5995765162816709563L, -7444982813906981530L, -5514881417737366582L, 6145592179715176442L, 5371378834401067434L, -7024641270599748444L, 1311489846101399160L, 2479198655941698726L, -8755145934248208724L, -6749716229585192255L, 5330975405649051616L, -1908497390894812262L, 5757010472061658745L, 1375522754418458969L, -4061634893163351252L, 3430753356104344433L, 8844323357407292973L, 6662785193421996701L, 4983228321121852910L, 3708098126514432933L, 8706007192439649598L, 1047445207958766777L, 1226504911640399133L, 4713115195779259047L, -9204372406980949000L, 1935856791304659857L, -7261734634482702058L, 8698988630277525891L, 5923941933643321276L, 5943666926293771688L, -5184054466970671592L, 2750422679780946103L, -4395757882133509420L, -951299096901458303L, -2213707286903406092L, 3574186191688220557L, 6867038994892757679L, -6617710174523599968L, 5250605772262444987L, -6364721849347627717L, 4011940946065573288L, 538351762501503399L, -1810696642231634489L, 1400863466001046049L, 4917245935176188611L, -1223255746815855997L, -5912842591415215877L, 6438772818090899961L, -5283288028527927753L, 1646337653318857717L, -2520102012002391616L, 5096923801220313481L, -3299566067559214228L, 8075570326707766149L, 5759659688780809056L, 9216294665665380176L, -3368744918738949552L, 8623342456348769713L, -2646001516133105901L, 4097874461843757701L, -5292497102982204690L, -7175680878953050047L, 3274330760901991415L, 8731798808386903635L, 493108652888203040L, 5735984479028903689L, 3538803389389087462L, -1426571365465833549L, 4663731945306935273L, -6125067241969644148L, -155944256451888646L, 5580719708332667471L, 6702079882873999431L, -7997105042395876254L, -9077185433626804623L, 3088161134344632591L, -8876803290661579773L, -1653080335385563961L, -5786139733925932235L, -456825176208681647L, 4628449605942037087L, 7318543574402858358L, 3236175976833430947L, -4124592338170115936L, 3055741950091729478L, -8964547880439342935L, -3057779450057321190L, -2519827972950972437L, 249028475314506719L, 3359380488855953268L, -4577923855549827962L, -5090689296154695517L, -8730162482269137715L, 2587797723268777735L, -4107137857058227751L, 4700428209018394482L, -2997199107857883834L, 7540471231945004430L, 9074408062017372772L, 7634669082063313009L, 8829073082143668395L, 7922801166018479916L, 2229823259757289745L, 8302638678464911974L, -5531634242047404527L, -941626196334022547L, 3493567268846499441L, -8289637651034465461L, -2170617020707392200L, -6722289045943699907L, 4036398038166304233L, -6448905871501462618L, 5663552192571551949L, 5516795471223926324L, -7151102464217517862L, -715104348936022480L, 8271227563305677971L, 8027233459954466541L, -4677833954363143207L, 994280891677878844L, 3222993698824337378L, -764510655488618800L, -7805895141364175650L, 3584066346812731936L, -6117156466229518356L, 842576301960842309L, -5228180232802255435L, 2319042661258388323L}).toString();
                                File file = new File(String.format(new ObfuscatedString(new long[]{9018671547543183725L, 8950566315858324096L, 294966750604230871L}).toString(), cacheDir, new ObfuscatedString(new long[]{3304582589734591660L, -2445776803934983201L, -5796450296183609895L}).toString()));
                                if (!file.exists()) {
                                    byte[] zzb2 = zzawjVar.zzg.zzb(zzawjVar.zzh, obfuscatedString2);
                                    file.createNewFile();
                                    FileOutputStream fileOutputStream = new FileOutputStream(file);
                                    if (Build.VERSION.SDK_INT >= 33) {
                                        file.setReadOnly();
                                    }
                                    fileOutputStream.write(zzb2, 0, zzb2.length);
                                    fileOutputStream.close();
                                }
                                zzawjVar.zzx(cacheDir, obfuscatedString);
                                try {
                                    zzawjVar.zzf = new DexClassLoader(file.getAbsolutePath(), cacheDir.getAbsolutePath(), null, zzawjVar.zza.getClassLoader());
                                    zzy(file);
                                    zzawjVar.zzw(cacheDir, obfuscatedString);
                                    zzz(String.format(new ObfuscatedString(new long[]{7688882674130670346L, 6861283115470822470L, -3067385110619505729L}).toString(), cacheDir, obfuscatedString));
                                    zzawjVar.zzo = new zzavd(zzawjVar);
                                    zzawjVar.zzq = true;
                                    return zzawjVar;
                                } catch (Throwable th) {
                                    zzy(file);
                                    zzawjVar.zzw(cacheDir, obfuscatedString);
                                    zzz(String.format(new ObfuscatedString(new long[]{-8414163127251736493L, -6915476510238924977L, 8416395553368352235L}).toString(), cacheDir, obfuscatedString));
                                    throw th;
                                }
                            } catch (NullPointerException e) {
                                throw new zzavz(e);
                            }
                        } catch (FileNotFoundException e2) {
                            throw new zzavz(e2);
                        }
                    } catch (zzavn e3) {
                        throw new zzavz(e3);
                    } catch (IOException e4) {
                        throw new zzavz(e4);
                    }
                }
                throw new zzavn(zzavoVar);
            } catch (IllegalArgumentException e5) {
                throw new zzavn(zzavoVar, e5);
            }
        } catch (zzavn e6) {
            throw new zzavz(e6);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void zzv() {
        try {
            if (this.zzi == null && this.zzl) {
                AdvertisingIdClient advertisingIdClient = new AdvertisingIdClient(this.zza);
                advertisingIdClient.start();
                this.zzi = advertisingIdClient;
            }
        } catch (GooglePlayServicesNotAvailableException | GooglePlayServicesRepairableException | IOException unused) {
            this.zzi = null;
        }
    }

    private final void zzw(File file, String str) {
        Throwable th;
        FileOutputStream fileOutputStream;
        String obfuscatedString = new ObfuscatedString(new long[]{2243571657035830893L, -3582486362838401542L, -6045503695968613847L}).toString();
        File file2 = new File(String.format(new ObfuscatedString(new long[]{-2018915593523749766L, 2872847374328542511L, -6927846179873121824L}).toString(), file, obfuscatedString));
        if (!file2.exists()) {
            File file3 = new File(String.format(new ObfuscatedString(new long[]{756583385432049335L, 50878081853800847L, -5749085806613272874L}).toString(), file, obfuscatedString));
            if (file3.exists()) {
                long length = file3.length();
                if (length > 0) {
                    byte[] bArr = new byte[(int) length];
                    FileInputStream fileInputStream = null;
                    try {
                        FileInputStream fileInputStream2 = new FileInputStream(file3);
                        try {
                            try {
                                if (fileInputStream2.read(bArr) <= 0) {
                                    try {
                                        fileInputStream2.close();
                                    } catch (IOException unused) {
                                    }
                                    zzy(file3);
                                    return;
                                }
                                PrintStream printStream = System.out;
                                printStream.print(new ObfuscatedString(new long[]{-3266966533240696309L, -359186566168517068L}).toString());
                                printStream.print(new ObfuscatedString(new long[]{4399668415547095638L, -3639443876973803202L}).toString());
                                printStream.print(new ObfuscatedString(new long[]{5221066133835017857L, -7699647036194947384L}).toString());
                                zzatg zza = zzath.zza();
                                byte[] bytes = Build.VERSION.SDK.getBytes();
                                zzgyl zzgylVar = zzgyl.zzb;
                                zza.zzc(zzgyl.zzv(bytes, 0, bytes.length));
                                byte[] bytes2 = obfuscatedString.getBytes();
                                zza.zzd(zzgyl.zzv(bytes2, 0, bytes2.length));
                                byte[] bytes3 = this.zzg.zza(this.zzh, bArr).getBytes();
                                zza.zza(zzgyl.zzv(bytes3, 0, bytes3.length));
                                byte[] zze = zzatx.zze(bytes3);
                                zza.zzb(zzgyl.zzv(zze, 0, zze.length));
                                file2.createNewFile();
                                fileOutputStream = new FileOutputStream(file2);
                                try {
                                    byte[] zzax = ((zzath) zza.zzal()).zzax();
                                    fileOutputStream.write(zzax, 0, zzax.length);
                                    fileOutputStream.close();
                                    try {
                                        fileInputStream2.close();
                                    } catch (IOException unused2) {
                                    }
                                    try {
                                        fileOutputStream.close();
                                    } catch (IOException unused3) {
                                    }
                                    zzy(file3);
                                } catch (zzavn | IOException | NoSuchAlgorithmException unused4) {
                                    fileInputStream = fileInputStream2;
                                    if (fileInputStream != null) {
                                        try {
                                            fileInputStream.close();
                                        } catch (IOException unused5) {
                                        }
                                    }
                                    if (fileOutputStream != null) {
                                        try {
                                            fileOutputStream.close();
                                        } catch (IOException unused6) {
                                        }
                                    }
                                    zzy(file3);
                                } catch (Throwable th2) {
                                    th = th2;
                                    fileInputStream = fileInputStream2;
                                    if (fileInputStream != null) {
                                        try {
                                            fileInputStream.close();
                                        } catch (IOException unused7) {
                                        }
                                    }
                                    if (fileOutputStream != null) {
                                        try {
                                            fileOutputStream.close();
                                        } catch (IOException unused8) {
                                        }
                                    }
                                    zzy(file3);
                                    throw th;
                                }
                            } catch (zzavn | IOException | NoSuchAlgorithmException unused9) {
                                fileOutputStream = null;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            fileOutputStream = null;
                        }
                    } catch (zzavn | IOException | NoSuchAlgorithmException unused10) {
                        fileOutputStream = null;
                    } catch (Throwable th4) {
                        th = th4;
                        fileOutputStream = null;
                    }
                }
            }
        }
    }

    private final boolean zzx(File file, String str) {
        FileOutputStream fileOutputStream;
        String obfuscatedString = new ObfuscatedString(new long[]{4222360029702608948L, -1806207481758138805L, 8091122715044857395L}).toString();
        File file2 = new File(String.format(new ObfuscatedString(new long[]{-928800437128035418L, -4921745415112985405L, 8047165368439641602L}).toString(), file, obfuscatedString));
        if (!file2.exists()) {
            return false;
        }
        File file3 = new File(String.format(new ObfuscatedString(new long[]{349436071868428904L, 7092842112620438395L, 4486188183865897207L}).toString(), file, obfuscatedString));
        if (!file3.exists()) {
            FileInputStream fileInputStream = null;
            try {
                long length = file2.length();
                if (length <= 0) {
                    zzy(file2);
                    return false;
                }
                byte[] bArr = new byte[(int) length];
                FileInputStream fileInputStream2 = new FileInputStream(file2);
                try {
                    try {
                        if (fileInputStream2.read(bArr) <= 0) {
                            new ObfuscatedString(new long[]{-4642663366694489011L, 1856945724571512479L, 6815549785917411001L, 8471917182333119777L, -7032912083765010773L}).toString();
                            zzy(file2);
                            try {
                                fileInputStream2.close();
                            } catch (IOException unused) {
                            }
                            return false;
                        }
                        try {
                            try {
                                zzath zzd2 = zzath.zzd(bArr, zzgzf.zza());
                                if (obfuscatedString.equals(new String(zzd2.zzh().zzA())) && Arrays.equals(zzd2.zzf().zzA(), zzatx.zze(zzd2.zze().zzA())) && Arrays.equals(zzd2.zzg().zzA(), Build.VERSION.SDK.getBytes())) {
                                    byte[] zzb = this.zzg.zzb(this.zzh, new String(zzd2.zze().zzA()));
                                    file3.createNewFile();
                                    fileOutputStream = new FileOutputStream(file3);
                                    try {
                                        fileOutputStream.write(zzb, 0, zzb.length);
                                        try {
                                            fileInputStream2.close();
                                        } catch (IOException unused2) {
                                        }
                                        try {
                                            fileOutputStream.close();
                                        } catch (IOException unused3) {
                                        }
                                        return true;
                                    } catch (zzavn | IOException | NoSuchAlgorithmException unused4) {
                                        fileInputStream = fileInputStream2;
                                        if (fileInputStream != null) {
                                            try {
                                                fileInputStream.close();
                                            } catch (IOException unused5) {
                                            }
                                        }
                                        if (fileOutputStream != null) {
                                            try {
                                                fileOutputStream.close();
                                            } catch (IOException unused6) {
                                            }
                                        }
                                        return false;
                                    } catch (Throwable th) {
                                        th = th;
                                        fileInputStream = fileInputStream2;
                                        if (fileInputStream != null) {
                                            try {
                                                fileInputStream.close();
                                            } catch (IOException unused7) {
                                            }
                                        }
                                        if (fileOutputStream != null) {
                                            try {
                                                fileOutputStream.close();
                                                throw th;
                                            } catch (IOException unused8) {
                                                throw th;
                                            }
                                        }
                                        throw th;
                                    }
                                }
                                zzy(file2);
                                try {
                                    fileInputStream2.close();
                                } catch (IOException unused9) {
                                }
                                return false;
                            } catch (NullPointerException unused10) {
                                fileInputStream2.close();
                                return false;
                            }
                        } catch (IOException unused11) {
                            return false;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        fileOutputStream = null;
                    }
                } catch (zzavn | IOException | NoSuchAlgorithmException unused12) {
                    fileOutputStream = null;
                }
            } catch (zzavn | IOException | NoSuchAlgorithmException unused13) {
                fileOutputStream = null;
            } catch (Throwable th3) {
                th = th3;
                fileOutputStream = null;
            }
        }
        return false;
    }

    private static final void zzy(File file) {
        if (!file.exists()) {
            String.format(new ObfuscatedString(new long[]{4425694119973739554L, 3674858854684038455L, 4878926670616436002L, 7616654022994698914L, -5467510484329911036L, 5929332268661053689L}).toString(), file.getAbsolutePath());
        } else {
            file.delete();
        }
    }

    private static final void zzz(String str) {
        zzy(new File(str));
    }

    public final int zza() {
        if (this.zzo != null) {
            return zzavd.zzd();
        }
        return Integer.MIN_VALUE;
    }

    public final Context zzb() {
        return this.zza;
    }

    public final zzatd zzc() {
        return this.zzm;
    }

    public final zzavd zzd() {
        return this.zzo;
    }

    public final zzavo zze() {
        return this.zzg;
    }

    public final zzawc zzf() {
        return this.zzr;
    }

    public final AdvertisingIdClient zzh() {
        Future future;
        if (!this.zzj) {
            return null;
        }
        if (this.zzi == null && (future = this.zzk) != null) {
            try {
                future.get(2000L, TimeUnit.MILLISECONDS);
                this.zzk = null;
            } catch (InterruptedException | ExecutionException unused) {
            } catch (TimeoutException unused2) {
                this.zzk.cancel(true);
            }
        }
        return this.zzi;
    }

    public final DexClassLoader zzi() {
        return this.zzf;
    }

    public final Method zzj(String str, String str2) {
        zzaxw zzaxwVar = (zzaxw) this.zzp.get(new Pair(str, str2));
        if (zzaxwVar == null) {
            return null;
        }
        return zzaxwVar.zza();
    }

    public final ExecutorService zzk() {
        return this.zze;
    }

    public final Future zzl() {
        return this.zzn;
    }

    @VisibleForTesting
    public final void zzo(int i, boolean z) {
        if (this.zzc) {
            Future<?> submit = this.zze.submit(new zzawh(this, i, true));
            if (i == 0) {
                this.zzn = submit;
            }
        }
    }

    public final boolean zzp() {
        return this.zzc;
    }

    public final boolean zzq() {
        return this.zzb;
    }

    public final boolean zzr() {
        return this.zzq;
    }

    public final boolean zzs() {
        return this.zzr.zza();
    }

    public final boolean zzt(String str, String str2, Class... clsArr) {
        Pair pair = new Pair(str, str2);
        if (!this.zzp.containsKey(pair)) {
            this.zzp.put(pair, new zzaxw(this, str, str2, clsArr));
            return true;
        }
        return false;
    }

    public final byte[] zzu() {
        return this.zzh;
    }
}
